<!--
  Copyright 2016 The Cartographer Authors

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<launch>

    <arg name="sim_time"            default="true"/>
    <arg name="PicoSide"            default="false"/>
    <arg name="StartTime"           default="0"/>
    <arg name="DurationTime"        default="500"/>
    <arg name="RunCartographer"     default="true"/>
    <arg name="YamlFile" 	    default="/root/work/CartographerFiles/configuration_files/ScanFilter/FrontScanOnlyOf60.yaml"/>
    <arg name="MinHeightFilter"     default="-0.5"/>
    <arg name="MaxHeightFilter"     default="0.5"/>   
    <arg name="IsConfig3D"          default="false"/>
    <arg name="IsConfigWithOdom"    default="false"/>
    <arg name="GenerateOdom"        default="false"/>
    <arg name="SensorMode" 	    default="12"/>
    <!--SensorMode options =  
            0 - PointCloud from Structure Sensor
            1 - PointCloud from PicoFlexx Sensor
            2 - LaserScan from Structure Sensor
            3 - LaserScan from PicoFlexx Sensor
            4 - LaserScan from RPlidar Sensor (Full scan)
            5 - LaserScan from RPlidar sensor (partial scan as defined by yaml file)
            6 - Several LaserScan from RPlidar Sensor (run python script)
            7 - Scan of 16 positions from RPlidar Sensor (run python script)
            8 - LaserScan from Structure Sensor + Side Laser scan from RPlidar
    -->
    
	<param if="$(arg sim_time)" name="use_sim_time" value="true"/>
	
	<param if="$(arg sim_time)" name="robot_description" textfile="/root/work/CartographerFiles/urdf/StructurePicoDownKit.urdf"/>
    <param unless="$(arg sim_time)" name="robot_description" textfile="/root/work/CartographerFiles/urdf/StructurePicoDownKit.urdf"/>
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>
  
    <remap from="/imu_node/imu" to="/imu"/>

        
    <group if="$(eval arg('SensorMode') == 0)"> <!-- PointCloud from Structure Sensor -->
        <node pkg="nodelet" type="nodelet" name="pcl_manager" args="manager"/>
        <node pkg="nodelet" type="nodelet" name="metricizer" 
              args="load depth_image_proc/convert_metric pcl_manager">
            <remap from="image_raw" to="/depth/image"/>
            <remap from="image" to="/image"/>
        </node>
        <node pkg="nodelet" type="nodelet" name="rectifier" args="load image_proc/rectify pcl_manager">
            <remap from="image_mono" to="/image"/>
            <remap from="camera_info" to="/depth/camera_info"/>
            <remap from="image_rect" to="/image_rect"/>
        </node>
        <node pkg="nodelet" type="nodelet" name="cloudifier"
              args="load depth_image_proc/point_cloud_xyz pcl_manager">
            <remap from="camera_info" to="/depth/camera_info"/>
            <remap from="image_rect" to="/image_rect"/>
        </node>
        <node pkg="nodelet" type="nodelet" name="passthroughZ" args="load pcl/PassThrough pcl_manager" output="screen">
            <remap from="~input" to="/points"/>
            <remap from="~output" to="/points1"/>
            <rosparam param="filter_field_name">y</rosparam>
            <rosparam param="filter_limit_min" subst_value="True">$(arg MinHeightFilter)</rosparam>
            <rosparam param="filter_limit_max" subst_value="True">$(arg MaxHeightFilter)</rosparam>
            <rosparam param="filter_limit_negative">False</rosparam>
        </node>
        <node pkg="nodelet" type="nodelet" name="passthroughX" args="load pcl/PassThrough pcl_manager" output="screen">
            <remap from="~input" to="/points1"/>
            <remap from="~output" to="/points2"/>
            <rosparam param="filter_field_name">z</rosparam>
            <rosparam param="filter_limit_min">0.3</rosparam>
            <rosparam param="filter_limit_max">6</rosparam>
            <rosparam param="filter_limit_negative">False</rosparam>
        </node>        
        <arg name="LuaConfigFile" value="3D/PointCloudWithOdom_3d.lua" if="$(eval arg('IsConfig3D') and arg('IsConfigWithOdom'))"/>
        <arg name="LuaConfigFile" value="3D/PointCloud_3d.lua" if="$(eval arg('IsConfig3D') and not arg('IsConfigWithOdom'))"/>
        <arg name="LuaConfigFile" value="2D/PointCloudWithOdom_2d.lua" if="$(eval not arg('IsConfig3D') and arg('IsConfigWithOdom'))"/>
        <arg name="LuaConfigFile" value="2D/PointCloud_2d.lua" if="$(eval not arg('IsConfig3D') and not arg('IsConfigWithOdom'))"/>
        
        <node if="$(arg RunCartographer)" name="cartographer_node" pkg="cartographer_ros" type="cartographer_node" 
              args="-configuration_directory /root/work/CartographerFiles/configuration_files/LuaFiles
              -configuration_basename $(arg LuaConfigFile)"
              output="screen">
        </node>
        <node if="$(arg RunCartographer)" name="cartographer_occupancy_grid_node" pkg="cartographer_ros"
              type="cartographer_occupancy_grid_node" args="-resolution 0.05"/> 
    </group>

    <group if="$(eval arg('SensorMode') == 1)"> <!-- PointCloud from PicoFlexx Sensor -->
        <node pkg="nodelet" type="nodelet" name="pcl_manager" args="manager"/>
        <node pkg="nodelet" type="nodelet" name="metricizer" 
              args="load depth_image_proc/convert_metric pcl_manager">
            <remap from="image_raw" to="/royale_camera_driver/depth_image"/>
            <remap from="image" to="/image"/>
        </node>
        <node pkg="nodelet" type="nodelet" name="rectifier" args="load image_proc/rectify pcl_manager">
            <remap from="image_mono" to="/image"/>
            <remap from="camera_info" to="/royale_camera_driver/camera_info"/>
            <remap from="image_rect" to="/image_rect"/>
        </node>
        <node pkg="nodelet" type="nodelet" name="cloudifier"
              args="load depth_image_proc/point_cloud_xyz pcl_manager">
            <remap from="camera_info" to="/royale_camera_driver/camera_info"/>
            <remap from="image_rect" to="/image_rect"/>
        </node>
        <node pkg="nodelet" type="nodelet" name="passthroughZ" args="load pcl/PassThrough pcl_manager" output="screen">
            <remap from="~input" to="/points"/>
            <remap from="~output" to="/points2"/>
            <rosparam param="filter_field_name">y</rosparam>
            <rosparam param="filter_limit_min" subst_value="True">$(arg MinHeightFilter)</rosparam>
            <rosparam param="filter_limit_max" subst_value="True">$(arg MaxHeightFilter)</rosparam>
            <rosparam param="filter_limit_negative">False</rosparam>
        </node>
        <node pkg="nodelet" type="nodelet" name="passthroughX" args="load pcl/PassThrough pcl_manager" output="screen">
            <remap from="~input" to="/points1"/>
            <remap from="~output" to="/points2"/>
            <rosparam param="filter_field_name">z</rosparam>
            <rosparam param="filter_limit_min">0.3</rosparam>
            <rosparam param="filter_limit_max">4</rosparam>
            <rosparam param="filter_limit_negative">False</rosparam>
        </node>         
        <arg name="LuaConfigFile" value="3D/PointCloudWithOdom_3d.lua" if="$(eval arg('IsConfig3D') and arg('IsConfigWithOdom'))"/>
        <arg name="LuaConfigFile" value="3D/PointCloud_3d.lua" if="$(eval arg('IsConfig3D') and not arg('IsConfigWithOdom'))"/>
        <arg name="LuaConfigFile" value="2D/PointCloudWithOdom_2d.lua" if="$(eval not arg('IsConfig3D') and arg('IsConfigWithOdom'))"/>
        <arg name="LuaConfigFile" value="2D/PointCloud_2d.lua" if="$(eval not arg('IsConfig3D') and not arg('IsConfigWithOdom'))"/>
        
        <node if="$(arg RunCartographer)" name="cartographer_node" pkg="cartographer_ros" type="cartographer_node" 
              args="-configuration_directory /root/work/CartographerFiles/configuration_files/LuaFiles 
              -configuration_basename $(arg LuaConfigFile)"
              output="screen">
        </node>
        <node if="$(arg RunCartographer)" name="cartographer_occupancy_grid_node" pkg="cartographer_ros"
              type="cartographer_occupancy_grid_node" args="-resolution 0.05"/> 
    </group>

    <group if="$(eval arg('SensorMode') == 2)"> <!-- LaserScan from Structure Sensor -->
        <node pkg="nodelet" type="nodelet" name="pcl_manager" args="manager"/>
        <node pkg="nodelet" type="nodelet" name="rectifier" args="load image_proc/rectify pcl_manager">
            <remap from="image_mono" to="/visible/image_raw"/>
            <remap from="camera_info" to="/visible/camera_info"/>
            <remap from="image_rect" to="/image_rect"/>
        </node>        
        <node name="squash_depth_camera" pkg="depthimage_to_laserscan" type="depthimage_to_laserscan">
            <rosparam param="range_min">0.3</rosparam>
            <rosparam param="range_max">6</rosparam>        
            <remap from="image" to="/depth/image" />
            <remap from="camera_info" to="/depth/camera_info" />
        </node>
        
        <arg name="LuaConfigFile" value="3D/LaserScanWithOdom_3d.lua" if="$(eval arg('IsConfig3D') and arg('IsConfigWithOdom'))"/>
        <arg name="LuaConfigFile" value="3D/LaserScan_3d.lua" if="$(eval arg('IsConfig3D') and not arg('IsConfigWithOdom'))"/>
        <arg name="LuaConfigFile" value="2D/LaserScanWithOdom_2d.lua" if="$(eval not arg('IsConfig3D') and arg('IsConfigWithOdom'))"/>
        <arg name="LuaConfigFile" value="2D/LaserScan_2d.lua" if="$(eval not arg('IsConfig3D') and not arg('IsConfigWithOdom'))"/>
        
        <node if="$(arg RunCartographer)" name="cartographer_node" pkg="cartographer_ros" type="cartographer_node" 
              args="-configuration_directory /root/work/CartographerFiles/configuration_files/LuaFiles 
              -configuration_basename $(arg LuaConfigFile)"
              output="screen">
        </node>
        <node if="$(arg RunCartographer)" name="cartographer_occupancy_grid_node" pkg="cartographer_ros"
              type="cartographer_occupancy_grid_node" args="-resolution 0.05"/> 
    </group>
    
    <group if="$(eval arg('SensorMode') == 3)"> <!-- LaserScan from PicoFlexx Sensor -->        
        <node name="squash_depth_camera" pkg="depthimage_to_laserscan" type="depthimage_to_laserscan">
            <rosparam param="range_min">0.3</rosparam>
            <rosparam param="range_max">4</rosparam>
            <remap from="image" to="/royale_camera_driver/depth_image" />
            <remap from="camera_info" to="/royale_camera_driver/camera_info" />
        </node>

        <arg name="LuaConfigFile" value="3D/LaserScanWithOdom_3d.lua" if="$(eval arg('IsConfig3D') and arg('IsConfigWithOdom'))"/>
        <arg name="LuaConfigFile" value="3D/LaserScan_3d.lua" if="$(eval arg('IsConfig3D') and not arg('IsConfigWithOdom'))"/>
        <arg name="LuaConfigFile" value="2D/LaserScanWithOdom_2d.lua" if="$(eval not arg('IsConfig3D') and arg('IsConfigWithOdom'))"/>
        <arg name="LuaConfigFile" value="2D/LaserScan_2d.lua" if="$(eval not arg('IsConfig3D') and not arg('IsConfigWithOdom'))"/>
        
        <node if="$(arg RunCartographer)" name="cartographer_node" pkg="cartographer_ros" type="cartographer_node" 
              args="-configuration_directory /root/work/CartographerFiles/configuration_files/LuaFiles 
              -configuration_basename $(arg LuaConfigFile)"
              output="screen">
        </node>
        <node if="$(arg RunCartographer)" name="cartographer_occupancy_grid_node" pkg="cartographer_ros"
              type="cartographer_occupancy_grid_node" args="-resolution 0.05"/> 
    </group>

    <group if="$(eval arg('SensorMode') == 4)"> <!-- LaserScan from RPlidar Sensor (Full scan) -->        
        <arg name="LuaConfigFile" value="3D/LaserScan_3d.lua" if="$(arg IsConfig3D)"/>
        <arg name="LuaConfigFile" value="2D/LaserScan_2d.lua" unless="$(arg IsConfig3D)"/> 
        
        <node if="$(arg RunCartographer)" name="cartographer_node" pkg="cartographer_ros" type="cartographer_node" 
              args="-configuration_directory /root/work/CartographerFiles/configuration_files/LuaFiles 
              -configuration_basename $(arg LuaConfigFile)" 
              output="screen">
              <remap from="scan" to="/tof_ranges" />
        </node> <!-- -load_state_filename $(arg load_state_filename)" -->
        <node if="$(arg RunCartographer)" name="cartographer_occupancy_grid_node" pkg="cartographer_ros"
              type="cartographer_occupancy_grid_node" args="-resolution 0.05"/> 
        <node if="$(arg GenerateOdom)" name="ConvertTF2Odom" pkg="scripts" type="ConvertTF2Odom.py" />
        <node if="$(arg GenerateOdom)" pkg="rosbag" type="record" name="rosbag_record_diag" args="record -o $(arg rec_bag_filename) /imu_node/imu /clock /depth/image /depth/camera_info 
             /royale_camera_driver/depth_image /royale_camera_driver/camera_info /royale_camera_driver/gray_image /RP_scan /odom /visible/image_raw /visible/camera_info" output = "screen"/>
<!--        <node if="$(arg GenerateOdom)" pkg="rosbag" type="record" name="rosbag_record_diag" args="record -o $(arg rec_bag_filename) /clock /odom /tf /map" output = "screen"/> -->            
    </group>

    <group if="$(eval arg('SensorMode') == 10)"> <!-- LaserScan from mr18 Sensor (Full scan) -->        
        <arg name="LuaConfigFile" value="3D/LaserScan_3d.lua" if="$(arg IsConfig3D)"/>
        <arg name="LuaConfigFile" value="2D/LaserScan_2d.lua" unless="$(arg IsConfig3D)"/> 
        
        <node if="$(arg RunCartographer)" name="cartographer_node" pkg="cartographer_ros" type="cartographer_node" 
              args="-configuration_directory /root/work/CartographerFiles/configuration_files/LuaFiles 
              -configuration_basename $(arg LuaConfigFile)" 
              output="screen">
              <remap from="scan" to="/mr18" />
        </node> <!-- -load_state_filename $(arg load_state_filename)" -->
        <node if="$(arg RunCartographer)" name="cartographer_occupancy_grid_node" pkg="cartographer_ros"
              type="cartographer_occupancy_grid_node" args="-resolution 0.05"/> 
        <node if="$(arg GenerateOdom)" name="ConvertTF2Odom" pkg="scripts" type="ConvertTF2Odom.py" />
        <node if="$(arg GenerateOdom)" pkg="rosbag" type="record" name="rosbag_record_diag" args="record -o $(arg rec_bag_filename) /imu_node/imu /clock /depth/image /depth/camera_info 
             /royale_camera_driver/depth_image /royale_camera_driver/camera_info /royale_camera_driver/gray_image /RP_scan /odom /visible/image_raw /visible/camera_info" output = "screen"/>
<!--        <node if="$(arg GenerateOdom)" pkg="rosbag" type="record" name="rosbag_record_diag" args="record -o $(arg rec_bag_filename) /clock /odom /tf /map" output = "screen"/> -->            
    </group>

        <group if="$(eval arg('SensorMode') == 11)"> <!-- LaserScan from mr18 Sensor (Full scan) -->        
        <arg name="LuaConfigFile" value="3D/LaserScan_3d.lua" if="$(arg IsConfig3D)"/>
        <arg name="LuaConfigFile" value="2D/LaserScan_2d.lua" unless="$(arg IsConfig3D)"/> 
        <node name="squash_depth_camera" pkg="depthimage_to_laserscan" type="depthimage_to_laserscan">
            <rosparam param="range_min">0.5</rosparam>
            <rosparam param="range_max">6</rosparam>        
            <remap from="image" to="/depth/image" />
            <remap from="camera_info" to="/depth/camera_info" />
            <remap from="scan" to="Structure_Scan" />
        </node> 
        <node if="$(arg RunCartographer)" name="cartographer_node" pkg="cartographer_ros" type="cartographer_node" 
              args="-configuration_directory /root/work/CartographerFiles/configuration_files/LuaFiles 
              -configuration_basename $(arg LuaConfigFile)" 
              output="screen">
              <remap from="scan" to="/mr18_scan" />
        </node> <!-- -load_state_filename $(arg load_state_filename)" -->
        <node if="$(arg RunCartographer)" name="cartographer_occupancy_grid_node" pkg="cartographer_ros"
              type="cartographer_occupancy_grid_node" args="-resolution 0.05"/> 
        <node if="$(arg GenerateOdom)" name="ConvertTF2Odom" pkg="scripts" type="ConvertTF2Odom.py" />
        <node if="$(arg GenerateOdom)" pkg="rosbag" type="record" name="rosbag_record_diag" args="record -o $(arg rec_bag_filename) /imu_node/imu /clock /depth/image /depth/camera_info 
             /royale_camera_driver/depth_image /royale_camera_driver/camera_info /royale_camera_driver/gray_image /RP_scan /odom /visible/image_raw /visible/camera_info" output = "screen"/>
<!--        <node if="$(arg GenerateOdom)" pkg="rosbag" type="record" name="rosbag_record_diag" args="record -o $(arg rec_bag_filename) /clock /odom /tf /map" output = "screen"/> -->            
        <param name="tof_half_fov_deg" value="10.0"/>

    <node pkg="tof2lidar" name="tof2lidar" type="tof2lidar" output="screen">
   </node>  
    </group>


        <group if="$(eval arg('SensorMode') == 12)"> <!-- LaserScan from mr18 Sensor (Full scan) -->        
        <arg name="LuaConfigFile" value="3D/LaserScan_3d.lua" if="$(arg IsConfig3D)"/>
        <arg name="LuaConfigFile" value="2D/LaserScan_2d.lua" unless="$(arg IsConfig3D)"/> 
        <node name="squash_depth_camera" pkg="depthimage_to_laserscan" type="depthimage_to_laserscan">
            <rosparam param="range_min">0.5</rosparam>
            <rosparam param="range_max">6</rosparam>        
            <remap from="image" to="/depth/image" />
            <remap from="camera_info" to="/depth/camera_info" />
            <remap from="scan" to="scan_1" />
        </node> 
        <node if="$(arg RunCartographer)" name="cartographer_node" pkg="cartographer_ros" type="cartographer_node" 
              args="-configuration_directory /root/work/CartographerFiles/configuration_files/LuaFiles 
              -configuration_basename $(arg LuaConfigFile)" 
              output="screen">
              <remap from="scan_2" to="/mr18_scan" />
        </node> <!-- -load_state_filename $(arg load_state_filename)" -->
        <node if="$(arg RunCartographer)" name="cartographer_occupancy_grid_node" pkg="cartographer_ros"
              type="cartographer_occupancy_grid_node" args="-resolution 0.05"/> 
        <node if="$(arg GenerateOdom)" name="ConvertTF2Odom" pkg="scripts" type="ConvertTF2Odom.py" />
        <node if="$(arg GenerateOdom)" pkg="rosbag" type="record" name="rosbag_record_diag" args="record -o $(arg rec_bag_filename) /imu_node/imu /clock /depth/image /depth/camera_info 
             /royale_camera_driver/depth_image /royale_camera_driver/camera_info /royale_camera_driver/gray_image /RP_scan /odom /visible/image_raw /visible/camera_info" output = "screen"/>
<!--        <node if="$(arg GenerateOdom)" pkg="rosbag" type="record" name="rosbag_record_diag" args="record -o $(arg rec_bag_filename) /clock /odom /tf /map" output = "screen"/> -->            
        <param name="tof_half_fov_deg" value="10.0"/>

    <node pkg="tof2lidar" name="tof2lidar" type="tof2lidar" output="screen">
   </node>  
    </group>


    <group if="$(eval arg('SensorMode') == 5)"> <!--LaserScan from RPlidar sensor (partial scan defined by yaml)-->  
        <node pkg="laser_filters" type="scan_to_scan_filter_chain" name="laser_filter">
            <rosparam command="load" file="$(arg YamlFile)" />
            <remap from="scan" to="RP_scan" />
            <remap from="scan_filtered" to="scan" />
        </node>      

        <arg name="LuaConfigFile" value="3D/LaserScanWithOdom_3d.lua" if="$(eval arg('IsConfig3D') and arg('IsConfigWithOdom'))"/>
        <arg name="LuaConfigFile" value="3D/LaserScan_3d.lua" if="$(eval arg('IsConfig3D') and not arg('IsConfigWithOdom'))"/>
        <arg name="LuaConfigFile" value="2D/LaserScanWithOdom_2d.lua" if="$(eval not arg('IsConfig3D') and arg('IsConfigWithOdom'))"/>
        <arg name="LuaConfigFile" value="2D/LaserScan_2d.lua" if="$(eval not arg('IsConfig3D') and not arg('IsConfigWithOdom'))"/>
        
        <node if="$(arg RunCartographer)" name="cartographer_node" pkg="cartographer_ros" type="cartographer_node" 
              args="-configuration_directory /root/work/CartographerFiles/configuration_files/LuaFiles 
              -configuration_basename $(arg LuaConfigFile)"
              output="screen">
        </node>
        <node if="$(arg RunCartographer)" name="cartographer_occupancy_grid_node" pkg="cartographer_ros"
              type="cartographer_occupancy_grid_node" args="-resolution 0.05"/> 
    </group>

    <group if="$(eval arg('SensorMode') == 6)"> <!--Several LaserScan from RPlidar Sensor (run python script)--> 
        <node name="CreateMultipleScans" pkg="scripts" type="CreateMultiScan.py" /> 
          
        <arg name="LuaConfigFile" value="3D/LaserScanWithOdom3_3d.lua" if="$(eval arg('IsConfig3D') and arg('IsConfigWithOdom'))"/>
        <arg name="LuaConfigFile" value="3D/LaserScan3_3d.lua" if="$(eval arg('IsConfig3D') and not arg('IsConfigWithOdom'))"/>
        <arg name="LuaConfigFile" value="2D/LaserScanWithOdom3_2d.lua" if="$(eval not arg('IsConfig3D') and arg('IsConfigWithOdom'))"/>
        <arg name="LuaConfigFile" value="2D/LaserScan3_2d.lua" if="$(eval not arg('IsConfig3D') and not arg('IsConfigWithOdom'))"/>
        
        <node if="$(arg RunCartographer)" name="cartographer_node" pkg="cartographer_ros" type="cartographer_node" 
              args="-configuration_directory /root/work/CartographerFiles/configuration_files/LuaFiles 
              -configuration_basename $(arg LuaConfigFile)"
              output="screen">
        </node>
        <node if="$(arg RunCartographer)" name="cartographer_occupancy_grid_node" pkg="cartographer_ros"
              type="cartographer_occupancy_grid_node" args="-resolution 0.05"/> 
    </group>

    <group if="$(eval arg('SensorMode') == 7)"> <!--Scan of 16 positions from RPlidar Sensor (run python script)--> 
        <node pkg="nodelet" type="nodelet" name="pcl_manager" args="manager"/>
        <node pkg="nodelet" type="nodelet" name="metricizer" 
              args="load depth_image_proc/convert_metric pcl_manager">
            <remap from="image_raw" to="/depth/image"/>
            <remap from="image" to="/image"/>
        </node>
        <node pkg="nodelet" type="nodelet" name="rectifier" args="load image_proc/rectify pcl_manager">
            <remap from="image_mono" to="/image"/>
            <remap from="camera_info" to="/depth/camera_info"/>
            <remap from="image_rect" to="/image_rect"/>
        </node>
        <node pkg="nodelet" type="nodelet" name="cloudifier"
              args="load depth_image_proc/point_cloud_xyz pcl_manager">
            <remap from="camera_info" to="/depth/camera_info"/>
            <remap from="image_rect" to="/image_rect"/>
        </node>
        <node pkg="nodelet" type="nodelet" name="passthrough" args="load pcl/PassThrough pcl_manager" output="screen">
            <remap from="~input" to="/points"/>
            <remap from="~output" to="/points2"/>
            <rosparam param="filter_field_name">y</rosparam>
            <rosparam param="filter_limit_min" subst_value="True">$(arg MinHeightFilter)</rosparam>
            <rosparam param="filter_limit_max" subst_value="True">$(arg MaxHeightFilter)</rosparam>
            <rosparam param="filter_limit_negative">False</rosparam>
        </node>        
        
        <node name="CreateScanOf16" pkg="scripts" type="CreateScanOf16.py" /> 
          
        <arg name="LuaConfigFile" value="3D/LaserScanWithOdom_3d.lua" if="$(eval arg('IsConfig3D') and arg('IsConfigWithOdom'))"/>
        <arg name="LuaConfigFile" value="3D/LaserScan_3d.lua" if="$(eval arg('IsConfig3D') and not arg('IsConfigWithOdom'))"/>
        <arg name="LuaConfigFile" value="2D/LaserScanWithOdom_2d.lua" if="$(eval not arg('IsConfig3D') and arg('IsConfigWithOdom'))"/>
        <arg name="LuaConfigFile" value="2D/LaserScan_2d.lua" if="$(eval not arg('IsConfig3D') and not arg('IsConfigWithOdom'))"/>
        
        <node if="$(arg RunCartographer)" name="cartographer_node" pkg="cartographer_ros" type="cartographer_node" 
              args="-configuration_directory /root/work/CartographerFiles/configuration_files/LuaFiles 
              -configuration_basename $(arg LuaConfigFile)"
              output="screen">
        </node>
        <node if="$(arg RunCartographer)" name="cartographer_occupancy_grid_node" pkg="cartographer_ros"
              type="cartographer_occupancy_grid_node" args="-resolution 0.05"/> 
    </group>

    <group if="$(eval arg('SensorMode') == 8)"> <!-- LaserScan from Structure Sensor + Side Laser scan from RPlidar -->        
        <node name="squash_depth_camera" pkg="depthimage_to_laserscan" type="depthimage_to_laserscan">
            <rosparam param="range_min">0.5</rosparam>
            <rosparam param="range_max">6</rosparam>        
            <remap from="image" to="/depth/image" />
            <remap from="camera_info" to="/depth/camera_info" />
            <remap from="scan" to="Structure_Scan" />
        </node> 
        <node name="squash_depth_camera1" pkg="depthimage_to_laserscan" type="depthimage_to_laserscan">
            <rosparam param="range_min">0.5</rosparam>
            <rosparam param="range_max">6</rosparam>
            <remap from="image" to="/royale_camera_driver/depth_image" />
            <remap from="camera_info" to="/royale_camera_driver/camera_info" />
            <remap from="scan" to="Pico_Scan" />
        </node>
        <node name="CreateCombineScan" pkg="scripts" type="CombineTwoSensors.py" />
        
        <arg name="LuaConfigFile" value="3D/LaserScanWithOdom_3d.lua" if="$(eval arg('IsConfig3D') and arg('IsConfigWithOdom'))"/>
        <arg name="LuaConfigFile" value="3D/LaserScan_3d.lua" if="$(eval arg('IsConfig3D') and not arg('IsConfigWithOdom'))"/>
        <arg name="LuaConfigFile" value="2D/LaserScanWithOdom_2d.lua" if="$(eval not arg('IsConfig3D') and arg('IsConfigWithOdom'))"/>
        <arg name="LuaConfigFile" value="2D/LaserScan_2d.lua" if="$(eval not arg('IsConfig3D') and not arg('IsConfigWithOdom'))"/>
        
        <node if="$(arg RunCartographer)" name="cartographer_node" pkg="cartographer_ros" type="cartographer_node" 
              args="-configuration_directory /root/work/CartographerFiles/configuration_files/LuaFiles 
              -configuration_basename $(arg LuaConfigFile)"
              output="screen">
        </node>
        <node if="$(arg RunCartographer)" name="cartographer_occupancy_grid_node" pkg="cartographer_ros"
              type="cartographer_occupancy_grid_node" args="-resolution 0.05"/> 
    </group>

    <group if="$(eval arg('SensorMode') == 9)"> <!-- LaserScan from Structure Sensor + Side Laser scan from RPlidar -->        
        <node pkg="nodelet" type="nodelet" name="metricizer" 
              args="load depth_image_proc/convert_metric pcl_manager">
            <remap from="image_raw" to="/depth/image"/>
            <remap from="image" to="/image"/>
        </node>
        <node pkg="nodelet" type="nodelet" name="rectifier" args="load image_proc/rectify pcl_manager">
            <remap from="image_mono" to="/image"/>
            <remap from="camera_info" to="/depth/camera_info"/>
            <remap from="image_rect" to="/image_rect"/>
        </node> 
        <node pkg="nodelet" type="nodelet" name="cloudifier"
              args="load depth_image_proc/point_cloud_xyz pcl_manager">
            <remap from="camera_info" to="/depth/camera_info"/>
            <remap from="image_rect" to="/image_rect"/>
            <remap from="points" to="/points1"/>
        </node>
        <node pkg="nodelet" type="nodelet" name="passthroughZ" args="load pcl/PassThrough pcl_manager" output="screen">
            <remap from="~input" to="/points1"/>
            <remap from="~output" to="/points1_1"/>
            <rosparam param="filter_field_name">y</rosparam>
            <rosparam param="filter_limit_min" subst_value="True">$(arg MinHeightFilter)</rosparam>
            <rosparam param="filter_limit_max" subst_value="True">$(arg MaxHeightFilter)</rosparam>
            <rosparam param="filter_limit_negative">False</rosparam>
        </node>
        <node pkg="nodelet" type="nodelet" name="passthroughX" args="load pcl/PassThrough pcl_manager" output="screen">
            <remap from="~input" to="/points1_1"/>
            <remap from="~output" to="/points2_1"/>
            <rosparam param="filter_field_name">z</rosparam>
            <rosparam param="filter_limit_min">0.3</rosparam>
            <rosparam param="filter_limit_max">6</rosparam>
            <rosparam param="filter_limit_negative">False</rosparam>
        </node>
                                         
        <node pkg="nodelet" type="nodelet" name="metricizer1" 
              args="load depth_image_proc/convert_metric pcl_manager">
            <remap from="image_raw" to="/royale_camera_driver/depth_image"/>
            <remap from="image" to="/imagePic"/>
        </node>
        <node pkg="nodelet" type="nodelet" name="rectifier1" args="load image_proc/rectify pcl_manager">
            <remap from="image_mono" to="/imagePic"/>
            <remap from="camera_info" to="/royale_camera_driver/camera_info"/>
            <remap from="image_rect" to="/image_rectPic"/>
        </node>
        <node pkg="nodelet" type="nodelet" name="cloudifier1"
              args="load depth_image_proc/point_cloud_xyz pcl_manager">
            <remap from="camera_info" to="/royale_camera_driver/camera_info"/>
            <remap from="image_rect" to="/image_rectPic"/>
            <remap from="points" to="/points2"/>
        </node>
        <node pkg="nodelet" type="nodelet" name="passthroughZ1" args="load pcl/PassThrough pcl_manager" output="screen">
            <remap from="~input" to="/points2"/>
            <remap from="~output" to="/points1_2"/>
            <rosparam param="filter_field_name">y</rosparam>
            <rosparam param="filter_limit_min" subst_value="True">$(arg MinHeightFilter)</rosparam>
            <rosparam param="filter_limit_max" subst_value="True">$(arg MaxHeightFilter)</rosparam>
            <rosparam param="filter_limit_negative">False</rosparam>
        </node>
        <node pkg="nodelet" type="nodelet" name="passthroughX1" args="load pcl/PassThrough pcl_manager" output="screen">
            <remap from="~input" to="/points1_2"/>
            <remap from="~output" to="/points2_2"/>
            <rosparam param="filter_field_name">z</rosparam>
            <rosparam param="filter_limit_min">0.3</rosparam>
            <rosparam param="filter_limit_max">4</rosparam>
            <rosparam param="filter_limit_negative">False</rosparam>
        </node>
                
        <arg name="LuaConfigFile" value="3D/LaserScanWithOdom2_3d.lua" if="$(eval arg('IsConfig3D') and arg('IsConfigWithOdom'))"/>
        <arg name="LuaConfigFile" value="3D/LaserScan2_3d.lua" if="$(eval arg('IsConfig3D') and not arg('IsConfigWithOdom'))"/>
        <arg name="LuaConfigFile" value="2D/LaserScanWithOdom2_2d.lua" if="$(eval not arg('IsConfig3D') and arg('IsConfigWithOdom'))"/>
        <arg name="LuaConfigFile" value="2D/PointCloud2_2d.lua" if="$(eval not arg('IsConfig3D') and not arg('IsConfigWithOdom'))"/>
        
        <node if="$(arg RunCartographer)" name="cartographer_node" pkg="cartographer_ros" type="cartographer_node" 
              args="-configuration_directory /root/work/CartographerFiles/configuration_files/LuaFiles 
              -configuration_basename $(arg LuaConfigFile)"
              output="screen">
        </node>
        <node if="$(arg RunCartographer)" name="cartographer_occupancy_grid_node" pkg="cartographer_ros"
              type="cartographer_occupancy_grid_node" args="-resolution 0.05"/> 
    </group> 

    <node pkg="scripts" name="lidar2tof" type="lidar2tof.py" output="screen">
        <!-- <param name="frame_id" value="laser" /> -->
   </node>            
        

    <node name="playbag" pkg="rosbag" type="play" args="-r 2 --clock --start=$(arg StartTime) --duration=$(arg DurationTime) $(arg bag_filename)" >
    <remap from="map" to="slap" />
    <remap from="tf" to="tf_old" />
    <remap from="scan_matched_points2" to="slapy" />
    </node>
</launch>
